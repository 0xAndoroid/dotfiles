#!/usr/bin/env zsh

# Claude session management script
set -e

# Function to generate random Docker-style names
generate_random_name() {
    local adjectives=("admiring" "adoring" "affectionate" "agitated" "amazing" "angry" "awesome" "beautiful" "blissful" "bold" "boring" "brave" "busy" "charming" "clever" "cool" "compassionate" "competent" "confident" "cranky" "crazy" "dazzling" "determined" "distracted" "dreamy" "eager" "ecstatic" "elastic" "elated" "elegant" "eloquent" "epic" "exciting" "fervent" "festive" "flamboyant" "focused" "friendly" "frosty" "funny" "gallant" "gifted" "goofy" "gracious" "great" "happy" "hardcore" "heuristic" "hopeful" "hungry" "infallible" "inspiring" "intelligent" "interesting" "jolly" "jovial" "keen" "kind" "laughing" "loving" "lucid" "magical" "mystifying" "modest" "musing" "naughty" "nervous" "nice" "nifty" "nostalgic" "objective" "optimistic" "peaceful" "pedantic" "pensive" "practical" "priceless" "quirky" "quizzical" "recursing" "relaxed" "reverent" "romantic" "sad" "serene" "sharp" "silly" "sleepy" "stoic" "strange" "stupefied" "suspicious" "sweet" "tender" "thirsty" "trusting" "unruffled" "upbeat" "vibrant" "vigilant" "vigorous" "wizardly" "wonderful" "xenodochial" "youthful" "zealous" "zen")
    local nouns=("albattani" "allen" "almeida" "antonelli" "agnesi" "archimedes" "ardinghelli" "aryabhata" "austin" "babbage" "banach" "banzai" "bardeen" "bartik" "bassi" "beaver" "bell" "benz" "bhabha" "bhaskara" "black" "blackburn" "blackwell" "bohr" "booth" "borg" "bose" "bouman" "boyd" "brahmagupta" "brattain" "brown" "buck" "burnell" "cannon" "carson" "cartwright" "carver" "cerf" "chandrasekhar" "chaplygin" "chatelet" "chatterjee" "chebyshev" "cohen" "chaum" "clarke" "colden" "cori" "cray" "curie" "darwin" "davinci" "dewdney" "dhawan" "diffie" "dijkstra" "dirac" "driscoll" "dubinsky" "easley" "edison" "einstein" "elbakyan" "elgamal" "elion" "ellis" "engelbart" "euclid" "euler" "faraday" "feistel" "fermat" "fermi" "feynman" "franklin" "gagarin" "galileo" "galois" "ganguly" "gates" "gauss" "germain" "goldberg" "goldstine" "goldwasser" "golick" "goodall" "gould" "greider" "grothendieck" "haibt" "hamilton" "haslett" "hawking" "hellman" "hermann" "herschel" "hertz" "heyrovsky" "hodgkin" "hofstadter" "hoover" "hopper" "hugle" "hypatia" "ishizaka" "jackson" "jang" "jemison" "jennings" "jepsen" "johnson" "joliot" "jones" "kalam" "kapitsa" "kare" "keldysh" "keller" "kepler" "khayyam" "khorana" "kilby" "kirch" "knuth" "kowalevski" "lalande" "lamarr" "lamport" "leakey" "leavitt" "lederberg" "lehmann" "lewin" "lichterman" "liskov" "lovelace" "lumiere" "mahavira" "margulis" "matsumoto" "maxwell" "mayer" "mccarthy" "mcclintock" "mclaren" "mclean" "mcnulty" "mendel" "mendeleev" "meitner" "meninsky" "merkle" "mestorf" "mirzakhani" "moore" "morse" "murdock" "moser" "napier" "nash" "neumann" "newton" "nightingale" "nobel" "noether" "northcutt" "noyce" "panini" "pare" "pascal" "pasteur" "payne" "perlman" "pike" "poincare" "poitras" "proskuriakova" "ptolemy" "raman" "ramanujan" "ride" "montalcini" "ritchie" "rhodes" "robinson" "roentgen" "rosalind" "rubin" "saha" "sammet" "sanderson" "satoshi" "shamir" "shannon" "shaw" "shirley" "shockley" "shtern" "sinoussi" "snyder" "solomon" "spence" "stonebraker" "sutherland" "swanson" "swartz" "swirles" "taussig" "tereshkova" "tesla" "tharp" "thompson" "torvalds" "tu" "turing" "varahamihira" "vaughan" "visvesvaraya" "volhard" "villani" "wescoff" "wilbur" "wiles" "williams" "williamson" "wilson" "wing" "wozniak" "wright" "wu" "yalow" "yonath" "zhukovsky")
    
    local adj=${adjectives[$RANDOM % ${#adjectives[@]}]}
    local noun=${nouns[$RANDOM % ${#nouns[@]}]}
    echo "${adj}-${noun}"
}

# Get session name from argument or generate one
SESSION_NAME="${1:-$(generate_random_name)}"
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
SESSION_KEY="${SESSION_NAME}_${TIMESTAMP}"

# Create sessions directory if it doesn't exist
mkdir -p ~/.claude/sessions

# Session file for monitoring
SESSION_FILE=~/.claude/sessions/${SESSION_KEY}.txt

# Use local CLAUDE.md in current directory
CLAUDE_MD_PATH="./CLAUDE.md"
CLAUDE_MD_BACKUP=""
CLAUDE_MD_CREATED=false

# Check if local CLAUDE.md exists, if not create it
if [[ -f "$CLAUDE_MD_PATH" ]]; then
    # Backup existing local CLAUDE.md
    CLAUDE_MD_BACKUP=$(mktemp)
    cp "$CLAUDE_MD_PATH" "$CLAUDE_MD_BACKUP"
else
    # Create new local CLAUDE.md
    CLAUDE_MD_CREATED=true
    touch "$CLAUDE_MD_PATH"
fi

# Function to cleanup on exit
cleanup() {
    if [[ "$CLAUDE_MD_CREATED" == "true" ]]; then
        # We created the file, so remove it
        rm -f "$CLAUDE_MD_PATH"
    elif [[ -n "$CLAUDE_MD_BACKUP" && -f "$CLAUDE_MD_BACKUP" ]]; then
        # Restore original content
        cp "$CLAUDE_MD_BACKUP" "$CLAUDE_MD_PATH"
        rm -f "$CLAUDE_MD_BACKUP"
    fi
    
    # Clean up layout file if it exists
    [[ -f "$LAYOUT_FILE" ]] && rm -f "$LAYOUT_FILE"
}

# Set up cleanup on exit
trap cleanup EXIT INT TERM

# Add monitoring instructions to CLAUDE.md
cat >> "$CLAUDE_MD_PATH" << 'EOF'

# Session Monitoring Instructions

**============ MAJOR DECISION ============**
IMPORTANT: During this session, you must log important events to the session file.
**============ MAJOR DECISION ============**

When you make a major architectural decision or decide to try a new approach, use the claude-report script to log it.
When you reach a milestone in the process, also use claude-report to log it.

Use the Bash tool to run claude-report:
```bash
# For decisions:
claude-report -t decision -i high -d "Decided to use async architecture" -s SESSION_FILE_PATH

# For milestones:
claude-report -t milestone -i low -d "Completed initial setup" -s SESSION_FILE_PATH
```

The script will automatically generate the timestamp and create properly formatted JSON.

Replace SESSION_FILE_PATH with the actual path shown below.
Session file path: SESSION_FILE_PATH_PLACEHOLDER
EOF

# Replace the placeholder with actual session file path
# Use a temporary file to handle symlinks and special files
TEMP_FILE=$(mktemp)
sed "s|SESSION_FILE_PATH_PLACEHOLDER|$SESSION_FILE|g" "$CLAUDE_MD_PATH" | sed "s|SESSION_FILE_PATH|$SESSION_FILE|g" > "$TEMP_FILE"
cat "$TEMP_FILE" > "$CLAUDE_MD_PATH"
rm -f "$TEMP_FILE"

# Create the monitoring script path (absolute)
MONITOR_SCRIPT="$(cd "$(dirname "$0")" && pwd)/claude-monitor"

# Create a temporary layout file with .kdl extension
LAYOUT_FILE=$(mktemp -t zellij-layout.XXXXXX.kdl)

# Debug: Show what we're creating
echo "Creating layout file: $LAYOUT_FILE"
echo "Monitor script: $MONITOR_SCRIPT"
echo "Session file: $SESSION_FILE"

cat > "$LAYOUT_FILE" << EOF
layout {
    pane split_direction="vertical" {
        pane size="70%" {
            command "claude"
        }
        pane {
            command "$MONITOR_SCRIPT"
            args "$SESSION_FILE"
        }
    }
}
EOF

# Debug: Show layout content
echo "Layout content:"
cat "$LAYOUT_FILE"

# Start zellij with the layout
echo "Starting zellij with layout..."
zellij --layout "$LAYOUT_FILE"

# Clean up layout file if it still exists
[[ -f "$LAYOUT_FILE" ]] && rm -f "$LAYOUT_FILE"

echo "Session '$SESSION_NAME' completed."