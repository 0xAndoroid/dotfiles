#!/usr/bin/env zsh

# Claude session monitoring script
set -e

# Auto-detect session file based on zellij session name
SESSION_NAME="${ZELLIJ_SESSION_NAME:-unknown}"
echo "Looking for session file for: $SESSION_NAME"

# Wait for a session file matching our session name to appear
while true; do
    # Find the most recent session file for this session
    SESSION_FILE=$(ls -t ~/.claude/sessions/${SESSION_NAME}_*.txt 2>/dev/null | head -1)
    if [[ -n "$SESSION_FILE" && -f "$SESSION_FILE" ]]; then
        break
    fi
    sleep 0.5
done

# ANSI color codes
RESET="\033[0m"
BOLD="\033[1m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
MAGENTA="\033[35m"
CYAN="\033[36m"
WHITE="\033[37m"

# Function to play sound on macOS
play_sound() {
    local sound_name="$1"
    # Using afplay with system sounds
    case "$sound_name" in
        "decision")
            # Play Ping sound for high-priority decisions
            afplay /System/Library/Sounds/Ping.aiff 2>/dev/null || true
            ;;
        "milestone")
            # Play Glass sound for high-priority milestones
            afplay /System/Library/Sounds/Glass.aiff 2>/dev/null || true
            ;;
    esac
}

# Function to format timestamp
format_timestamp() {
    local iso_timestamp="$1"
    # Convert ISO8601 to readable format in local time
    if command -v gdate >/dev/null 2>&1; then
        # GNU date (from coreutils)
        gdate -d "$iso_timestamp" "+%H:%M:%S" 2>/dev/null || echo "$iso_timestamp"
    else
        # macOS date - handle ISO format with timezone
        # First try full ISO format with Z suffix
        if [[ "$iso_timestamp" =~ Z$ ]]; then
            date -j -u -f "%Y-%m-%dT%H:%M:%S" "${iso_timestamp%Z*}" "+%H:%M:%S" 2>/dev/null || echo "$iso_timestamp"
        else
            # Try without timezone - assume local time
            date -j -f "%Y-%m-%dT%H:%M:%S" "${iso_timestamp%%.*}" "+%H:%M:%S" 2>/dev/null || echo "$iso_timestamp"
        fi
    fi
}

# Function to get terminal width
get_term_width() {
    # Try multiple methods to get terminal width
    local width
    
    # Method 1: tput cols
    if command -v tput >/dev/null 2>&1; then
        width=$(tput cols 2>/dev/null)
        if [[ -n "$width" && "$width" =~ ^[0-9]+$ ]]; then
            echo "$width"
            return
        fi
    fi
    
    # Method 2: stty size
    if command -v stty >/dev/null 2>&1; then
        local size=$(stty size 2>/dev/null)
        if [[ -n "$size" ]]; then
            width=$(echo "$size" | cut -d' ' -f2)
            if [[ -n "$width" && "$width" =~ ^[0-9]+$ ]]; then
                echo "$width"
                return
            fi
        fi
    fi
    
    # Method 3: COLUMNS environment variable
    if [[ -n "$COLUMNS" && "$COLUMNS" =~ ^[0-9]+$ ]]; then
        echo "$COLUMNS"
        return
    fi
    
    # Default fallback
    echo 80
}


# Function to display event
display_event() {
    local json="$1"
    local term_width=$(get_term_width)
    
    # Parse JSON fields using zsh parameter expansion and pattern matching
    local type=$(echo "$json" | grep -o '"type"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*: *"\([^"]*\)".*/\1/')
    local impact=$(echo "$json" | grep -o '"impact"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*: *"\([^"]*\)".*/\1/')
    local timestamp=$(echo "$json" | grep -o '"timestamp"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*: *"\([^"]*\)".*/\1/')
    local description=$(echo "$json" | grep -o '"description"[[:space:]]*:[[:space:]]*"[^"]*"' | sed 's/.*: *"\([^"]*\)".*/\1/')
    
    # Format timestamp
    local formatted_time=$(format_timestamp "$timestamp")
    
    # Display based on type and impact
    if [[ "$type" == "decision" ]]; then
        if [[ "$impact" == "high" ]]; then
            # High-impact decision - very prominent display
            echo ""
            echo "${BOLD}${RED}╔════════════════════════════╗${RESET}"
            echo "${BOLD}${RED}║      MAJOR DECISION        ║${RESET}"
            echo "${BOLD}${RED}╚════════════════════════════╝${RESET}"
            echo "${BOLD}${YELLOW}⚡ Time: ${WHITE}$formatted_time${RESET}"
            echo "${BOLD}${CYAN}📋 Decision: ${WHITE}$description${RESET}"
            echo "${BOLD}${RED}══════════════════════════════${RESET}"
            echo ""
            play_sound "decision"
        else
            # Low-impact decision
            echo -n "${GREEN}[${formatted_time}] ${YELLOW}📌 Decision:${RESET} "
            # Calculate remaining width after prefix
            local prefix_plain="[${formatted_time}] 📌 Decision: "
            local remaining_width=$((term_width - ${#prefix_plain}))
            if [[ ${#description} -le $remaining_width ]]; then
                echo "$description"
            else
                # Print first part on same line
                echo "${description:0:$remaining_width}"
                # Wrap remaining text with indent
                local indent=$(printf "%${#prefix_plain}s" "")
                local rest="${description:$remaining_width}"
                while [[ -n "$rest" ]]; do
                    if [[ ${#rest} -le $remaining_width ]]; then
                        echo "${indent}${rest}"
                        break
                    else
                        echo "${indent}${rest:0:$remaining_width}"
                        rest="${rest:$remaining_width}"
                    fi
                done
            fi
        fi
    elif [[ "$type" == "milestone" ]]; then
        if [[ "$impact" == "high" ]]; then
            # High-impact milestone - prominent display
            echo ""
            echo "${BOLD}${GREEN}┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓${RESET}"
            echo "${BOLD}${GREEN}┃    MILESTONE REACHED       ┃${RESET}"
            echo "${BOLD}${GREEN}┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛${RESET}"
            echo "${BOLD}${YELLOW}🎯 Time: ${WHITE}$formatted_time${RESET}"
            echo "${BOLD}${MAGENTA}🏆 Achievement: ${WHITE}$description${RESET}"
            echo "${BOLD}${GREEN}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${RESET}"
            echo ""
            play_sound "milestone"
        else
            # Low-impact milestone
            echo -n "${BLUE}[${formatted_time}] ${GREEN}✓ Milestone:${RESET} "
            # Calculate remaining width after prefix
            local prefix_plain="[${formatted_time}] ✓ Milestone: "
            local remaining_width=$((term_width - ${#prefix_plain}))
            if [[ ${#description} -le $remaining_width ]]; then
                echo "$description"
            else
                # Print first part on same line
                echo "${description:0:$remaining_width}"
                # Wrap remaining text with indent
                local indent=$(printf "%${#prefix_plain}s" "")
                local rest="${description:$remaining_width}"
                while [[ -n "$rest" ]]; do
                    if [[ ${#rest} -le $remaining_width ]]; then
                        echo "${indent}${rest}"
                        break
                    else
                        echo "${indent}${rest:0:$remaining_width}"
                        rest="${rest:$remaining_width}"
                    fi
                done
            fi
        fi
    else
        # Unknown type
        echo -n "${CYAN}[${formatted_time}] ${WHITE}Event:${RESET} "
        # Calculate remaining width after prefix
        local prefix_plain="[${formatted_time}] Event: "
        local remaining_width=$((term_width - ${#prefix_plain}))
        if [[ ${#description} -le $remaining_width ]]; then
            echo "$description"
        else
            # Print first part on same line
            echo "${description:0:$remaining_width}"
            # Wrap remaining text with indent
            local indent=$(printf "%${#prefix_plain}s" "")
            local rest="${description:$remaining_width}"
            while [[ -n "$rest" ]]; do
                if [[ ${#rest} -le $remaining_width ]]; then
                    echo "${indent}${rest}"
                    break
                else
                    echo "${indent}${rest:0:$remaining_width}"
                    rest="${rest:$remaining_width}"
                fi
            done
        fi
    fi
}

# Display header
clear

# Get terminal width once
TERM_WIDTH=$(get_term_width)

# Use a conservative approach - don't try to fill the terminal width
# Just use a fixed reasonable size that works everywhere
echo ""
echo "${BOLD}${CYAN}     Claude Session Monitor${RESET}"
echo "${BOLD}${CYAN}     ═════════════════════${RESET}"
echo ""

# Display session file path, wrapping if needed
echo -n "${YELLOW}Monitoring: ${WHITE}"
if [[ ${#SESSION_FILE} -gt $((TERM_WIDTH - 15)) ]]; then
    # Path is too long, show truncated version
    echo "...${SESSION_FILE: -$((TERM_WIDTH - 18))}"
else
    echo "$SESSION_FILE"
fi
echo "${RESET}"

echo "${YELLOW}Waiting for events...${RESET}"
echo ""

# Create session file if it doesn't exist
touch "$SESSION_FILE"

# Monitor the session file for new lines
tail -f "$SESSION_FILE" 2>/dev/null | while IFS= read -r line; do
    # Skip empty lines
    [[ -z "$line" ]] && continue
    
    # Try to parse as JSON and display
    if echo "$line" | grep -q '^{.*}$'; then
        display_event "$line"
    else
        # Display non-JSON lines as regular output
        echo "${GRAY}[$(date +%H:%M:%S)] $line${RESET}"
    fi
done