#!/bin/bash

# Script to manage Claude Code in Docker with proper isolation

set -e

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to generate container name from current path
generate_container_name() {
    local current_path="$(pwd)"
    local container_name="claude-dev"

    # Remove home directory prefix if present
    if [[ "$current_path" == "$HOME"* ]]; then
        current_path="${current_path#$HOME/}"
    fi

    # Replace slashes with dashes and remove dots
    current_path="${current_path//\//-}"
    current_path="${current_path//./}"

    # Remove dev and Developer from path
    current_path="${current_path//Developer-/}"
    current_path="${current_path//-Developer/}"
    current_path="${current_path//dev-/}"
    current_path="${current_path//-dev/}"

    # Remove leading and trailing dashes
    current_path="${current_path#-}"
    current_path="${current_path%-}"

    # Construct final container name
    if [[ -n "$current_path" ]]; then
        container_name="claude-dev-${current_path}"
    fi

    echo "$container_name"
}

# Set working directory (current directory)
WORK_DIR="$(pwd)"
export WORK_DIR

# Get container name for current directory
CONTAINER_NAME=$(generate_container_name)
export CONTAINER_NAME

# Generate project name to isolate docker-compose projects
# Replace all non-alphanumeric characters with underscores
PROJECT_NAME=$(echo "$CONTAINER_NAME" | sed 's/[^a-zA-Z0-9]/_/g' | tr '[:upper:]' '[:lower:]')
export PROJECT_NAME

# Function to print colored output
print_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if docker is installed
if ! command -v docker &>/dev/null; then
    print_error "Docker is not installed. Please install Docker first."
    exit 1
fi

# Check if docker-compose is installed
if ! command -v docker-compose &>/dev/null && ! docker compose version &>/dev/null; then
    print_error "Docker Compose is not installed. Please install Docker Compose first."
    exit 1
fi

# Determine docker-compose command
if docker compose version &>/dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    DOCKER_COMPOSE="docker-compose"
fi

# Function to ensure external volumes exist
ensure_volumes_exist() {
    local volumes=(
        "claude-cargo-registry"
        "claude-cargo-git"
    )
    
    for volume in "${volumes[@]}"; do
        if ! docker volume inspect "$volume" &>/dev/null; then
            print_info "Creating volume: $volume"
            docker volume create "$volume"
        fi
    done
}

# Function to check if container is running
is_container_running() {
    docker ps --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"
}

# Function to ensure container is running
ensure_container_running() {
    if ! is_container_running; then
        print_info "Container not running. Starting container..."
        ensure_volumes_exist
        cd "$SCRIPT_DIR" && WORK_DIR="$WORK_DIR" CONTAINER_NAME="$CONTAINER_NAME" $DOCKER_COMPOSE -p "$PROJECT_NAME" -f docker-compose.claude.yml up -d
        print_info "Container started!"
        # Wait a moment for container to be ready
        sleep 2
    fi
}

case "$1" in
build)
    print_info "Building Claude development container..."
    ensure_volumes_exist
    cd "$SCRIPT_DIR" && $DOCKER_COMPOSE -p "$PROJECT_NAME" -f docker-compose.claude.yml build
    print_info "Build complete!"
    ;;

update)
    print_info "Rebuilding Claude development container without cache..."
    ensure_volumes_exist
    cd "$SCRIPT_DIR" && $DOCKER_COMPOSE -p "$PROJECT_NAME" -f docker-compose.claude.yml build --no-cache
    print_info "Rebuild complete!"
    ;;

start)
    print_info "Starting Claude development container..."
    ensure_volumes_exist
    cd "$SCRIPT_DIR" && WORK_DIR="$WORK_DIR" CONTAINER_NAME="$CONTAINER_NAME" $DOCKER_COMPOSE -p "$PROJECT_NAME" -f docker-compose.claude.yml up -d
    print_info "Container started!"
    print_info "To connect: $0 shell"
    ;;

stop)
    print_info "Stopping Claude development container..."
    cd "$SCRIPT_DIR" && CONTAINER_NAME="$CONTAINER_NAME" $DOCKER_COMPOSE -p "$PROJECT_NAME" -f docker-compose.claude.yml stop
    print_info "Container stopped!"
    ;;

shell)
    ensure_container_running
    print_info "Connecting to Claude development container ($CONTAINER_NAME)..."
    print_warn "You are now in an isolated environment. Only /workspace is shared with your host."
    docker exec -it "$CONTAINER_NAME" /bin/bash
    ;;

claude)
    shift # Remove the 'claude' command
    ensure_container_running
    print_info "Starting Claude Code in container ($CONTAINER_NAME)..."
    print_warn "Using --dangerously-skip-permissions flag in isolated environment"
    print_info "Working directory: $WORK_DIR -> /workspace"
    echo ""

    # Simply run Claude directly
    docker exec -it -w /workspace "$CONTAINER_NAME" \
        claude --dangerously-skip-permissions "$@"
    ;;

logs)
    print_info "Showing container logs..."
    cd "$SCRIPT_DIR" && CONTAINER_NAME="$CONTAINER_NAME" $DOCKER_COMPOSE -p "$PROJECT_NAME" -f docker-compose.claude.yml logs -f
    ;;

clean)
    print_warn "This will remove the current container: $CONTAINER_NAME"
    print_info "Note: Shared volumes (cargo cache, credentials) will be preserved"
    read -p "Are you sure? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Cleaning up..."
        # Check if container exists before trying to remove it
        if docker ps -a --format '{{.Names}}' | grep -q "^${CONTAINER_NAME}$"; then
            cd "$SCRIPT_DIR" && CONTAINER_NAME="$CONTAINER_NAME" $DOCKER_COMPOSE -p "$PROJECT_NAME" -f docker-compose.claude.yml down
        else
            print_info "Container $CONTAINER_NAME not found or already removed"
        fi
        print_info "Cleanup complete!"
    else
        print_info "Cleanup cancelled."
    fi
    ;;

clean-all)
    print_warn "This will remove ALL Claude containers (but keep shared volumes)"
    read -p "Are you sure? (y/N) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        print_info "Finding all Claude containers..."
        containers=$(docker ps -a --filter "name=claude-dev" --format "{{.Names}}")
        if [[ -z "$containers" ]]; then
            print_info "No Claude containers found."
        else
            echo "$containers" | while read -r container; do
                print_info "Removing container: $container"
                docker rm -f "$container"
            done
            print_info "All Claude containers removed!"
        fi
    else
        print_info "Cleanup cancelled."
    fi
    ;;

prune)
    print_error "WARNING: This will remove ALL Claude containers AND volumes!"
    print_warn "This includes all cached dependencies, credentials, and configurations."
    read -p "Are you absolutely sure? Type 'yes' to confirm: " -r
    if [[ "$REPLY" == "yes" ]]; then
        print_info "Removing all Claude containers..."
        containers=$(docker ps -a --filter "name=claude-dev" --format "{{.Names}}")
        if [[ -n "$containers" ]]; then
            echo "$containers" | while read -r container; do
                print_info "Removing container: $container"
                docker rm -f "$container"
            done
        fi
        
        print_info "Removing all Claude volumes..."
        volumes=(
            "claude-cargo-registry"
            "claude-cargo-git"
        )
        for volume in "${volumes[@]}"; do
            if docker volume inspect "$volume" &>/dev/null; then
                print_info "Removing volume: $volume"
                docker volume rm "$volume"
            fi
        done
        
        print_info "Prune complete! All Claude containers and volumes removed."
    else
        print_info "Prune cancelled."
    fi
    ;;

status)
    print_info "Container status:"
    docker ps -a --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
    ;;

wta)
    shift # Remove the 'wta' command
    if [[ $# -lt 1 ]]; then
        print_error "Usage: $0 wta <new-branch-name> [base-branch]"
        exit 1
    fi
    
    NEW_BRANCH="$1"
    BASE_BRANCH="${2:-$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "main")}"
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir &>/dev/null; then
        print_error "Not in a git repository"
        exit 1
    fi
    
    # Check if worktree already exists
    if git worktree list | grep -q "/trees/$NEW_BRANCH "; then
        print_error "Worktree for branch '$NEW_BRANCH' already exists in trees/ folder"
        exit 1
    fi
    
    # Ensure trees directory exists
    if [[ ! -d "trees" ]]; then
        print_info "Creating trees directory..."
        mkdir -p trees
    fi
    
    # Check if branch already exists
    if git show-ref --verify --quiet "refs/heads/$NEW_BRANCH"; then
        # Branch exists, create worktree with existing branch
        print_info "Using existing branch '$NEW_BRANCH' for worktree..."
        if git worktree add "trees/$NEW_BRANCH" "$NEW_BRANCH"; then
            print_info "Worktree created successfully at: $(pwd)/trees/$NEW_BRANCH"
        else
            print_error "Failed to create worktree"
            exit 1
        fi
    else
        # Branch doesn't exist, create new branch
        print_info "Creating worktree '$NEW_BRANCH' based on '$BASE_BRANCH'..."
        if git worktree add "trees/$NEW_BRANCH" -b "$NEW_BRANCH" "$BASE_BRANCH"; then
            print_info "Worktree created successfully at: $(pwd)/trees/$NEW_BRANCH"
        else
            print_error "Failed to create worktree"
            exit 1
        fi
    fi
    ;;

wtrm)
    shift # Remove the 'wtrm' command
    if [[ $# -lt 1 ]]; then
        print_error "Usage: $0 wtrm <branch-name>"
        exit 1
    fi
    
    BRANCH_NAME="$1"
    
    # Check if we're in a git repository
    if ! git rev-parse --git-dir &>/dev/null; then
        print_error "Not in a git repository"
        exit 1
    fi
    
    # Check if worktree exists in trees folder
    if ! git worktree list | grep -q "/trees/$BRANCH_NAME "; then
        print_error "No worktree found for branch '$BRANCH_NAME' in trees/ folder"
        exit 1
    fi
    
    # Remove the worktree
    print_info "Removing worktree for branch '$BRANCH_NAME'..."
    if git worktree remove "trees/$BRANCH_NAME"; then
        print_info "Worktree removed successfully"
    else
        print_error "Failed to remove worktree"
        exit 1
    fi
    ;;

help)
    echo "Usage: $0 {build|update|start|stop|shell|claude|logs|clean|clean-all|prune|status|wta|wtrm|help}"
    echo ""
    echo "Commands:"
    echo "  build         - Build the Docker container"
    echo "  update        - Rebuild the Docker container without cache"
    echo "  start         - Start the container in background"
    echo "  stop          - Stop the container (keeps container)"
    echo "  shell         - Open a bash shell in the container (auto-starts if needed)"
    echo "  claude        - Start Claude Code session (auto-starts if needed)"
    echo "  logs          - Show container logs"
    echo "  clean         - Stop and remove current container (keeps shared volumes)"
    echo "  clean-all     - Remove ALL Claude containers (keeps shared volumes)"
    echo "  prune         - Remove ALL Claude containers AND volumes (complete reset)"
    echo "  status        - Show container status"
    echo "  wta           - Create a new git worktree with a new branch (worktree add)"
    echo "  wtrm          - Remove a git worktree (keeps the branch) (worktree remove)"
    echo "  help          - Show this help message"
    echo ""
    echo "Current container name: $CONTAINER_NAME"
    echo ""
    echo "Examples:"
    echo "  $0                               # Start Claude Code session (default)"
    echo "  $0 build                         # Build container"
    echo "  $0 update                        # Rebuild container without cache"
    echo "  $0 start                         # Start container"
    echo "  $0 claude                        # Start Claude Code session"
    echo "  $0 claude --model opus-4         # Start Claude with specific model"
    echo "  $0 shell                         # Open shell in container"
    echo "  $0 wta feature-xyz               # Create new worktree with branch feature-xyz"
    echo "  $0 wta fix-bug main              # Create new worktree based on main branch"
    echo "  $0 wtrm feature-xyz              # Remove worktree for branch feature-xyz"
    ;;

"")
    # Default behavior: start Claude
    ensure_container_running
    print_info "Starting Claude Code in container ($CONTAINER_NAME)..."
    print_warn "Using --dangerously-skip-permissions flag in isolated environment"
    print_info "Working directory: $WORK_DIR -> /workspace"
    echo ""

    # Run Claude directly with all arguments
    docker exec -it -w /workspace "$CONTAINER_NAME" \
        claude --dangerously-skip-permissions "$@"
    ;;

*)
    print_error "Unknown command: $1"
    echo "Run '$0 help' for usage information."
    exit 1
    ;;
esac
