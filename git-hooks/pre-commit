#!/bin/bash
# Enhanced universal pre-commit hook for Rust projects with config support
# Reads configuration from ~/.git-hooks/pre-commit-config.toml using tomlq

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Config file location
CONFIG_FILE="$HOME/.git-hooks/pre-commit-config.toml"

# Default configuration values
ENABLE_FMT=true
ENABLE_TYPOS=true
ENABLE_CLIPPY=false
ENABLE_TEST=false
VERBOSE=true
FAIL_FAST=true
ALLOW_MISSING_TOOLS=true
FMT_ARGS="-- --check"
TYPOS_ARGS="--diff"
CLIPPY_ARGS="-- -D warnings"

# Function to parse TOML config using tq
parse_config() {
    if [ -f "$CONFIG_FILE" ] && command -v tq &> /dev/null; then
        # Parse rust section
        ENABLE_FMT=$(tq -f "$CONFIG_FILE" -r '.rust.enable_fmt' 2>/dev/null || echo "true")
        ENABLE_TYPOS=$(tq -f "$CONFIG_FILE" -r '.rust.enable_typos' 2>/dev/null || echo "true")
        ENABLE_CLIPPY=$(tq -f "$CONFIG_FILE" -r '.rust.enable_clippy' 2>/dev/null || echo "false")
        ENABLE_TEST=$(tq -f "$CONFIG_FILE" -r '.rust.enable_test' 2>/dev/null || echo "false")
        
        # Parse arguments (join array elements)
        local fmt_args_array=$(tq -f "$CONFIG_FILE" -r '.rust.fmt_args' -o json 2>/dev/null | jq -r 'join(" ")' 2>/dev/null || echo "-- --check")
        FMT_ARGS="$fmt_args_array"
        
        local typos_args_array=$(tq -f "$CONFIG_FILE" -r '.rust.typos_args' -o json 2>/dev/null | jq -r 'join(" ")' 2>/dev/null || echo "--diff")
        TYPOS_ARGS="$typos_args_array"
        
        local clippy_args_array=$(tq -f "$CONFIG_FILE" -r '.rust.clippy_args' -o json 2>/dev/null | jq -r 'join(" ")' 2>/dev/null || echo "-- -D warnings")
        CLIPPY_ARGS="$clippy_args_array"
        
        # Parse general section
        VERBOSE=$(tq -f "$CONFIG_FILE" -r '.general.verbose' 2>/dev/null || echo "true")
        FAIL_FAST=$(tq -f "$CONFIG_FILE" -r '.general.fail_fast' 2>/dev/null || echo "true")
        ALLOW_MISSING_TOOLS=$(tq -f "$CONFIG_FILE" -r '.general.allow_missing_tools' 2>/dev/null || echo "true")
    elif [ -f "$CONFIG_FILE" ] && ! command -v tq &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  tq not found, using default settings${NC}"
        echo -e "${YELLOW}   Install with: cargo install tomlq${NC}"
    fi
}

# Function to log with verbosity control
log() {
    if [ "$VERBOSE" = "true" ]; then
        echo -e "$1"
    fi
}

# Function to check if we're in a Rust project
is_rust_project() {
    [ -f "Cargo.toml" ] || [ -f "../Cargo.toml" ] || [ -f "../../Cargo.toml" ]
}

# Function to check if path should be ignored
should_ignore() {
    local file="$1"
    if [ -f "$CONFIG_FILE" ] && command -v tq &> /dev/null; then
        local ignore_paths=$(tq -f "$CONFIG_FILE" -r '.rust.ignore_paths' -o json 2>/dev/null | jq -r '.[]' 2>/dev/null)
        while IFS= read -r pattern; do
            if [[ "$file" == *"$pattern"* ]]; then
                return 0
            fi
        done <<< "$ignore_paths"
    fi
    return 1
}

# Function to get staged Rust files
get_staged_rust_files() {
    git diff --cached --name-only --diff-filter=ACM | grep -E '\.(rs|toml)$' | while read -r file; do
        if ! should_ignore "$file"; then
            echo "$file"
        fi
    done
}

# Function to run a check
run_check() {
    local check_name="$1"
    local check_command="$2"
    local fix_command="$3"
    local required="$4"
    
    log "${YELLOW}Running $check_name...${NC}"
    
    if eval "$check_command"; then
        log "${GREEN}‚úì $check_name passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå $check_name failed!${NC}"
        if [ -n "$fix_command" ]; then
            echo -e "${RED}Run '$fix_command' to fix${NC}"
        fi
        
        if [ "$FAIL_FAST" = "true" ] || [ "$required" = "true" ]; then
            exit 1
        fi
        return 1
    fi
}

# Main execution
main() {
    # Parse configuration
    parse_config
    
    # Exit early if not a Rust project
    if ! is_rust_project; then
        exit 0
    fi
    
    log "${BLUE}ü¶Ä Running Rust pre-commit checks...${NC}"
    if [ -f "$CONFIG_FILE" ]; then
        log "${BLUE}üìã Using config from: $CONFIG_FILE${NC}"
    else
        log "${YELLOW}‚ö†Ô∏è  No config file found at: $CONFIG_FILE (using defaults)${NC}"
    fi
    
    # Check if cargo is installed
    if ! command -v cargo &> /dev/null; then
        echo -e "${RED}Error: cargo is not installed${NC}"
        exit 1
    fi
    
    # Get staged files for info
    local staged_files=$(get_staged_rust_files)
    if [ -z "$staged_files" ]; then
        log "${YELLOW}No Rust files staged, but checking entire project${NC}"
    else
        log "${BLUE}Staged Rust files:${NC}"
        echo "$staged_files" | while read -r file; do
            log "  ‚Ä¢ $file"
        done
    fi
    
    local failed=false
    
    # Run cargo fmt check
    if [ "$ENABLE_FMT" = "true" ]; then
        if ! run_check "cargo fmt" "cargo fmt $FMT_ARGS" "cargo fmt" true; then
            failed=true
        fi
    else
        log "${YELLOW}‚è© Skipping cargo fmt (disabled in config)${NC}"
    fi
    
    # Run typos check
    if [ "$ENABLE_TYPOS" = "true" ]; then
        if command -v typos &> /dev/null; then
            if ! run_check "typos" "typos $TYPOS_ARGS" "typos -w" false; then
                failed=true
            fi
        else
            if [ "$ALLOW_MISSING_TOOLS" = "true" ]; then
                log "${YELLOW}‚ö†Ô∏è  'typos' not installed. Install with: cargo install typos-cli${NC}"
            else
                echo -e "${RED}Error: 'typos' is required but not installed${NC}"
                echo -e "${RED}Install with: cargo install typos-cli${NC}"
                exit 1
            fi
        fi
    else
        log "${YELLOW}‚è© Skipping typos check (disabled in config)${NC}"
    fi
    
    # Run cargo clippy
    if [ "$ENABLE_CLIPPY" = "true" ]; then
        if ! run_check "cargo clippy" "cargo clippy $CLIPPY_ARGS" "cargo clippy --fix" false; then
            failed=true
        fi
    else
        log "${YELLOW}‚è© Skipping cargo clippy (disabled in config)${NC}"
    fi
    
    # Run cargo test
    if [ "$ENABLE_TEST" = "true" ]; then
        if ! run_check "cargo test" "cargo test --quiet" "" false; then
            failed=true
        fi
    else
        log "${YELLOW}‚è© Skipping cargo test (disabled in config)${NC}"
    fi
    
    # Final result
    if [ "$failed" = "true" ]; then
        echo -e "${RED}‚ùå Pre-commit checks failed!${NC}"
        exit 1
    else
        log "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
        exit 0
    fi
}

# Run main function
main "$@"
